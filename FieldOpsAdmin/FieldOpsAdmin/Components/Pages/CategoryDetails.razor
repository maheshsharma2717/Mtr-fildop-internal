@page "/CategoryDetails"
@using FieldOpsAdmin.Services
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject ApiService _apiService
@inject GlobalServices _globalService
<MudContainer MaxWidth="MaxWidth.Large">
    <MudGrid>
        <MudItem xs="12" Class="mt-5">
            <MudContainer Class="custom-container mb-5 p-5" Style="background-color:#fff;padding-bottom: 20px;">
                <MudContainer Class="mt-5">
                    <MudGrid AlignItems="Center" Style="justify-content:space-between; width: calc(100% + 24px)!important;">
                        <MudItem lg="3" md="12" xs="12" Class="mb-3">
                            <MudText Typo="Typo.h6" Class="pl-2 d-flex align-items-center">Categories Details</MudText>
                        </MudItem>
                        <MudItem lg="2" md="12" xs="12" Class="mb-3">
                        </MudItem>
                        <MudItem lg="4" md="12" xs="12" Class="mb-3">
                            <div class="search-container">
                                <input type="text" placeholder="Search Category" class="search-input" />
                                <button><img src="./Images/Search.svg" alt="Search Icon" class="mud-icon" /></button>
                            </div>
                        </MudItem>
                        <MudItem lg="3" xs="12" Class="d-flex justify-end mb-3">
                            <MudButton Variant="Variant.Filled" Class="add-btn" OnClick="OpenCategoryDialog">
                                <img src="./Images/Add-Category-Icon.svg" alt="Add Icon" class="mud-icon" />
                                Add Category
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                </MudContainer>
                <MudContainer Class="mt-4">
                    <MudGrid>
                        <!-- Adjust the span for small screens -->
                        <MudItem xs="12" lg="3">
                            <MudCard Class="mud-card">
                                <MudCardContent Class="mud-card-content">
                                    <div class="img-cont">
                                        <img src="@_category.Icon" alt="Name" class="category-icon img-contt" />
                                    </div>
                                    <div style="display:flex; align-items: center;">
                                        @if (_category != null)
                                        {
                                            <MudText Typo="Typo.subtitle1" Class="mud-category-text">@_category.Name</MudText>
                                        }
                                    </div>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                        <MudItem xs="12" lg="9">
                            <MudItem Class="pb-5 mt-1">
                                <MudText Typo="Typo.h6" Class="dsc-lbl">Description</MudText>
                            </MudItem>
                            <div class="description-container">
                                <MudText Typo="Typo.body1">
                                    @_category.Description
                                </MudText>
                            </div>
                            <div class="action-buttons mt-4">
                                <MudButton Variant="Variant.Filled" Class="btn-edit" OnClick="@(() => OpeneditCategoryDialog(_category))">
                                    <img src="./Images/Edit.svg" alt="Edit Icon" class="btn-icon" /> Edit
                                </MudButton>

                                <MudButton Variant="Variant.Filled" Class="btn-delete" OnClick="OpenDeleteDialogAsync">
                                    <img src="./Images/Trash_Full.svg" alt="Delete Icon" class="btn-icon" /> Delete
                                </MudButton>
                            </div>
                        </MudItem>
                    </MudGrid>
                </MudContainer>

            </MudContainer>
        </MudItem>
    </MudGrid>
</MudContainer>

<style>
    .add-btn {
        display: flex;
        padding: 10px;
        justify-content: space-evenly;
        align-items: center;
        gap: 8px;
        flex-shrink: 0;
        border-radius: 8px;
        color: #FFF;
        font-family: Inter;
        font-size: 14px;
        line-height: normal;
        background: #0074E3;
        text-transform: capitalize;
        width: 100%;
    }

        .add-btn:hover {
            background: #005bb5;
        }

    .btn-icon {
        width: 30px;
        height: 30px;
        margin-right: 10px;
    }

    .search-container {
        display: flex;
        padding: 10px 18px;
        justify-content: center;
        align-items: center;
        border-radius: 8px;
        font-size: 14px;
        border: 0.5px solid #000;
        background: #EFEFEF;
    }

    .search-input {
        border: none;
        outline: none;
        flex-grow: 1;
        background: transparent;
        font-size: 14px;
        width: 100%;
    }

    .search-icon {
        font-size: 20px;
        color: #000;
    }

    .category-details {
        text-align: center;
    }

    .dsc-lbl {
        color: #000;
        font-family: Inter;
        font-size: 20px;
        font-style: normal;
        font-weight: 600;
        line-height: normal;
    }

    .description-container {
        border: 0.1px solid #cbcbcb;
        border-radius: 10px;
        padding: 5px 20px;
        background-color: #F5F5F5;
        height :116px;
        overflow:scroll;
    }

    .action-buttons {
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .btn-edit {
        display: flex;
        padding: 10px;
        padding-right: 35px;
        justify-content: center;
        align-items: center;
        border-radius: 6px;
        color: #fff;
        background-color: #0074E3;
        text-align: center;
        margin-right: 20px;
        font-size: 16px;
        line-height: normal;
        text-transform: capitalize;
        border: none;
        cursor: pointer;
    }

        .btn-edit:hover {
            background-color: #005bb5;
        }

    .btn-delete {
        display: flex;
        padding: 10px;
        padding-right: 30px;
        justify-content: center;
        align-items: center;
        border-radius: 6px;
        color: #fff;
        background-color: #343434;
        font-size: 16px;
        line-height: normal;
        text-transform: capitalize;
        border: none;
        cursor: pointer;
    }

        .btn-delete:hover {
            background-color: #2c2c2c;
        }

    .mud-icon {
        width: 18px;
        height: 18px;
        margin-right: 8px;
    }
    /*picture */

    .mud-card {
        display: flex;
        width: 100%;
        height: 232px;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        gap: 42.006px;
        flex-shrink: 0;
        border-radius: 12.925px;
        background: #DBECFD;
    }

    .mud-card-content {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: space-around
    }

    .mud-icon-category {
        font-size: 50px;
        color: #0074E3;
    }

    .mud-category-text {
        margin-top: 10px;
        text-align: center;
        font-weight: 600;
        font-size: 18px;
        margin-right: 5px;
    }

    .img-contt {
        background: #fff;
        border-radius: 50%;
        padding: 10px;
        height: 100px;
    }

</style>


@code {
    public CategoryDto _category = new CategoryDto();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var uri = new Uri(NavigationManager.Uri);
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
            var categoryId = query["id"];
            if (int.TryParse(categoryId, out int id))
            {
                await getCategoryByIdAsync(id);
                StateHasChanged();
            }
        }
    }

    public async Task getCategoryByIdAsync(int id)
    {
        _category = await _apiService.MakeHttpGetRequest<CategoryDto>($"Admin/getservicecategorybyid?id={id}&domainId={_globalService.domainId}");
    }
    private void OpenCategoryDialog()
    {
        DialogService.Show<AddNewCategory>("Add Category", new DialogParameters
    {
        { "DialogTitle", "Add New Category" },
        { "ButtonLabel", "Add Category" }
    });
    }

    private void OpeneditCategoryDialog(CategoryDto category)
    {
        DialogService.Show<AddNewCategory>("Edit Category", new DialogParameters
    {
        { "DialogTitle", "Edit Category" },
        { "ButtonLabel", "Update Category" },
        { "Category", category }
    });
    }


    private async Task OpenDeleteDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters
    {
        { "Message", "Are You Sure You Want To Delete This Category?" },
        { "ConfirmButtonColor", "#FF2C2C" },
        { "CancelButtonColor", "#5A5A5A" }
    };

        var dialog = DialogService.Show<CancelPopup>("Confirm Deletion", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await DeleteCategoryAsync(_category.Id);
        }
    }
    [Inject] ISnackbar Snackbar { get; set; }

    private async Task DeleteCategoryAsync(int categoryId)
    {
        try
        {
            var domainId = _globalService.domainId;
            bool isSuccess = await _apiService.MakeHttpDeleteRequest<bool>($"Admin/deleteservicecategory?id={categoryId}&domainId={domainId}");
            if (isSuccess)
            {
                NavigationManager.NavigateTo("/ServiceCategories");
                Snackbar.Add("Category remove successfully!", Severity.Success);
            }
            else
            {
                Snackbar.Add("Failed to Delete!", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("An error occurred while processing your request.", Severity.Error);
        }
    }
}
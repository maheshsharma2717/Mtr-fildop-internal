@page "/service"
@using FieldOpsAdmin.Models
@using FieldOpsAdmin.Service
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
<MudContainer MaxWidth="MaxWidth.Large">
    <MudGrid>
        <MudOverlay Visible="@isLoading" DarkBackground="true" ZIndex="9999">
            <MudProgressCircular Color="Color.Tertiary" Indeterminate="true" />
        </MudOverlay>
        <MudItem xs="12" Class="mt-5">
            <MudContainer Class="custom-container mb-5 p-5" Style="background-color:#fff; border:0.1px solid #cbcbcb; border-radius:10px;">
                <MudContainer Class="mt-5">
                    <MudGrid AlignItems="Center" Style="justify-content:space-between; width: width: calc(100% + 24px)!important;">
                        <MudItem lg="12" md="12" xs="12" Class="mb-3">
                            <MudText Typo="Typo.h6" Class="pl-2 d-flex align-items-center">Service Requests</MudText>
                        </MudItem>
                        <MudItem lg="3" md="12" xs="12" Class="mb-3">
                            <div class="custom-select-wrapper">
                                <select class="custom-select" @onchange="OnRowsPerPageChange">
                                    <option value="10">View Rows: 10</option>
                                    <option value="200">View Rows: 200</option>
                                    <option value="300">View Rows: 300</option>
                                    <option value="1000">View Rows: 1000</option>
                                </select>
                            </div>
                        </MudItem>
                        <MudItem lg="3" md="12" xs="12" Class="mb-3">
                            <div class="custom-select-wrapper">
                                <select class="custom-select" @onchange="OnStatusPageChange">
                                    <option value="0">AllTask</option>
                                    <option value="1">Requested</option>
                                    <option value="2">Pending</option>
                                    <option value="3">Inprogress</option>
                                    <option value="4">cancelled</option>
                                    <option value="5">Completed</option>
                                </select>
                            </div>
                        </MudItem>
                        @*  <MudItem lg="4" md="12" xs="12" Class="mb-3">
                        <div class="search-container">
                        <input type="text" placeholder="Search Service" class="search-input" @bind="_searchTerm" />
                        <img src="./Images/Search.svg" alt="Search Icon" class="mud-icon" />
                        </div>
                        </MudItem> *@
                        <MudItem lg="3" md="12" xs="12" Class="mb-3">
                            <div class="search-container">
                                <input type="text" placeholder="Search Service" class="search-input" @bind-value="_searchTerm" @bind-value:event="oninput" />
                                <img src="./Images/Search.svg" alt="Search Icon" class="mud-icon" />
                            </div>
                        </MudItem>

                        <MudItem lg="3" xs="12" Class="d-flex  mb-3">
                            <MudButton Variant="Variant.Filled" OnClick="AddServiceRequest" Class="add-btn">
                                <img src="./Images/AddIcon.svg" alt="Add Icon" class="mud-icon" />
                                Add Service Request
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                </MudContainer>
                <MudContainer Class="custom-container">
                    <MudTable Items="PagedServiceRequests" Filter="ServiceRequestFilter" Striped="false" Bordered="false" Class="custom-table mb-5 mt-5">
                        <HeaderContent>
                            <MudTh Class="text-center" @onclick="SortBySN" SortDirection="@_snSortDirection">
                                @if (_snSortDirection == SortDirection.Ascending)
                                {
                                    <span class="custom-svg">
                                        <img src="./images/sorting.svg" alt="Sort Ascending" style="width: 12px;height: 18px;" />
                                    </span>
                                }
                                else if (_snSortDirection == SortDirection.Descending)
                                {
                                    <span class="custom-svg">
                                        <img src="./images/sorting.svg" alt="Sort Descending" style="transform: rotate(-180deg);width: 12px;height: 18px;" />
                                    </span>
                                }
                                SN
                            </MudTh>
                            <MudTh Class="t-head" Style="text-align:end;">Title</MudTh>
                            <MudTh Class="t-head" Style="text-align:end;">Category</MudTh>
                            <MudTh Class="t-head">Date Time</MudTh>
                            <MudTh Class="t-head" Style="text-align:start;">Status</MudTh>
                            <MudTh Class="t-head" Style="text-align:start;">Action</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd ColSpan="8">
                                <MudPaper Class="row-card" Elevation="0">
                                    <MudGrid Class="grid-rows">
                                        <MudItem xs="1" Class="text-center grid-item ">
                                            @context.SN
                                        </MudItem>
                                        <MudItem xs="3" Class="text-center grid-item">
                                            @context.Title
                                        </MudItem>
                                        <MudItem xs="2" Class="text-center grid-item">
                                            @context.Category
                                        </MudItem>
                                        <MudItem xs="2" Class="text-center grid-item">
                                            @context.DateTime.ToString("MMMM dd yyyy")
                                        </MudItem>
                                        <MudItem xs="2" Class="text-center grid-item">
                                            <span class="@GetStatusClass(@context.Status)">
                                                @context.Status
                                            </span>
                                        </MudItem>
                                        <MudItem xs="2" Class="text-center grid-item">
                                            <div class="action-container">
                                                <MudIconButton @onclick="() => viewDetails(context.Id)">
                                                        <img src="./Images/EditAction.svg" alt="Eye Icon" style="width: 24px; height: 24px;" />
                                                </MudIconButton>
                                                @* <MudIconButton OnClick="() => ShowConfirmationDialog()"> *@
                                                <MudIconButton OnClick="OpenCancelDialogAsync">
                                                    <img src="./Images/CancelledAction.svg" alt="Close Icon" style="width: 24px; height: 24px;" />
                                                </MudIconButton>

                                                <MudIconButton OnClick="() => OpenTaskDialogAsync(context.Id)">
                                                    <img src="./Images/OnGoingAction.svg" alt="Person Icon" style="width: 24px; height: 24px;" />
                                                </MudIconButton>
                                                <MudIconButton OnClick="OpenDuplicateDialogAsync">
                                                    <img src="./Images/DuplicateAction.svg" alt="Folder Icon" style="width: 24px; height: 24px;" />
                                                </MudIconButton>
                                            </div>
                                        </MudItem>
                                    </MudGrid>
                                </MudPaper>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudContainer>
                <PagerContent>
                    <MudGrid AlignItems="Center" Justify="Justify.Center">
                        <MudItem>
                            <div class="custom-pagination py-3">
                                <button @onclick="PreviousPage">
                                    <img src="./Images/Chevron_Left_MD.svg" alt="Previous" class="pagination-icon" />
                                </button>
                                @for (int i = 1; i <= TotalPages; i++)
                                {
                                    <button @onclick="() => GoToPage(i)" class="pagination-button @GetActiveClass(i)">
                                        @i
                                    </button>
                                }
                                <button @onclick="NextPage">
                                    <img src="./Images/Chevron_Right_MD.svg" alt="Next" class="pagination-icon" />
                                </button>
                            </div>
                        </MudItem>
                    </MudGrid>
                </PagerContent>
            </MudContainer>
        </MudItem>
    </MudGrid>
</MudContainer> 

<style>
    /*head*/

    .add-btn {
        display: flex;
        padding: 10px;
        justify-content: space-evenly;
        align-items: center;
        gap: 8px;
        flex-shrink: 0;
        border-radius: 8px;
        color: #FFF;
        font-family: Inter;
        font-size: 14px;
        line-height: normal;
        background: #0074E3;
        text-transform: capitalize;
        width: 100%;
    }

        .add-btn:hover {
            display: flex;
            padding: 10px;
            justify-content: space-evenly;
            align-items: center;
            gap: 8px;
            flex-shrink: 0;
            border-radius: 8px;
            color: #FFF;
            font-family: Inter;
            font-size: 14px;
            line-height: normal;
            background: #0074E3;
            text-transform: capitalize;
        }

    .mud-icon {
        width: 24px;
        height: 24px;
    }

    .search-container {
        display: flex;
        padding: 10px 18px;
        justify-content: center;
        align-items: center;
        border-radius: 8px;
        font-size: 14px;
        border: 0.5px solid #000;
        background: #EFEFEF;
        width: 100%;
    }

    .search-input {
        border: none;
        outline: none;
        flex-grow: 1;
        background: transparent;
        font-size: 14px;
        width: 100%;
    }

    .search-icon {
        font-size: 20px;
        color: #000;
    }

    .custom-select {
        flex-shrink: 0;
        padding: 12px 18px;
        border-radius: 10px;
        border: 0.5px solid #000;
        background: #EFEFEF;
        font-size: 14px;
        width: 100%;
    }

    /*table*/
    .mud-table-root .mud-table-head {
        background-color: #Efefef;
    }

    .t-head {
        text-align: center;
        font-size: 18px;
        font-style: normal;
        font-weight: 800;
        line-height: normal;
        color: #000 !important;
    }

    .text-center {
        text-align: center;
        font-family: Inter;
        font-size: 17px;
        font-style: normal;
        font-weight: 500;
        line-height: normal;
        color: #000;
    }

    /*pagination*/

    .custom-pagination {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
    }

    .pagination-button {
        width: 24px;
        height: 24px;
        border: 2px solid #000;
        background-color: transparent;
        color: #000;
        border-radius: 50%;
        font-weight: bold;
        font-size: 16px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
    }

    .active-page {
        background-color: #0074e3;
        color: #fff;
        border: none;
    }

    .status-pending {
        border-radius: 16px;
        background: #DCB012;
        color: #FFF;
        font-family: Inter;
        font-size: 12px;
        font-style: normal;
        font-weight: 700;
        line-height: normal;
        display: flex;
        height: 21px;
        padding: 10px;
        justify-content: center;
        align-items: center;
        gap: 10px;
    }

    .status-completed {
        color: #FFF;
        font-family: Inter;
        font-size: 12px;
        font-style: normal;
        font-weight: 700;
        line-height: normal;
        display: flex;
        height: 21px;
        padding: 10px;
        justify-content: center;
        align-items: center;
        gap: 10px;
        border-radius: 16px;
        background: #4AD771;
    }

    .status-ongoing {
        color: #FFF;
        font-family: Inter;
        font-size: 12px;
        font-style: normal;
        font-weight: 700;
        line-height: normal;
        display: flex;
        height: 21px;
        padding: 10px;
        justify-content: center;
        align-items: center;
        gap: 10px;
        border-radius: 16px;
        background: #764AD7;
    }

    .status-cancelled {
        color: #FFF;
        font-family: Inter;
        font-size: 12px;
        font-style: normal;
        font-weight: 700;
        line-height: normal;
        display: flex;
        height: 21px;
        padding: 10px;
        justify-content: center;
        align-items: center;
        gap: 10px;
        border-radius: 16px;
        background: #E64444;
    }

    .row-card {
        border: 0.5px solid #767676;
        border-radius: 10px;
        padding: 15px;
        background-color: white;
    }

    .action-container {
        display: flex;
        justify-content: space-around;
        background: #f1f1f1;
        border-radius: 5px;
        padding: 5px;
    }

    /*Mud Over wright and border */

    .mud-toolbar.mud-toolbar-gutters.mud-table-toolbar {
        height: auto;
        padding: 15px;
    }

    .mud-table-root .mud-table-body .mud-table-cell {
        border-bottom: none;
    }

    .mud-table-root .mud-table-cell {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .mud-grid-spacing-xs-6 > .grid-item {
        padding-left: 24px;
        padding-top: 24px;
        display: flex !important;
        align-items: center;
        justify-content: center;
    }

    .grid-rows {
        width: calc(100% + -12px) !important;
        margin-left: -24px;
        margin-top: -24px;
    }

    .custom-container {
        max-height: 100%;
    }

    }
</style>
@code {
    [Inject] TaskService _taskService { get; set; }

    public string PageTitle { get; set; } = "Service Booking";
    private string _searchTerm;
    private int _rowsPerPage = 10;
    private bool isLoading = false;
    [Inject] ISnackbar Snackbar { get; set; }
    private List<ServiceRequest> ServiceRequests = new();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ServiceRequests = await GetServiceRequests(0);
            StateHasChanged();
        }
    }
    private void viewDetails(int id)
    {
        NavigationManager.NavigateTo($"/serviceDetails?id={id}");
    }
    protected async Task<List<ServiceRequest>> GetServiceRequests(int statusId)
    {
        isLoading = true;
        StateHasChanged();
        try
        {
            List<ServiceRequest> serviceRequests = new();
            var response = await _taskService.GetAllTasks(statusId);

            if (response.IsSuccess)
            {
                string json = JsonConvert.SerializeObject(response.Result);
                List<TaskViewModel> requests = JsonConvert.DeserializeObject<List<TaskViewModel>>(json);
                if (requests != null)
                {
                    serviceRequests = requests.Select((c, index) => new ServiceRequest
                            {
                                SN = index + 1,
                                Id = c.Id,
                                Title = c.Name,
                                Category = c.CategoryName,
                                DateTime = c.CreatedAt,
                               // Status = c.Status
                                Status = c.ViewStatus
                            }).ToList();
                      
                    Snackbar.Add("Data Loaded Successfully!", Severity.Success);
                    currentPage = 1;
                }
            }
            else
            {
                Snackbar.Add(response.Message, Severity.Error);
            }
            return serviceRequests;
        }
        catch (Exception ex)
        {
            isLoading = false;
            Snackbar.Add($"Failed to load data: {ex.Message}", Severity.Error);
            throw;
        }
        finally
        {
            isLoading = false;
        }
    }

    private SortDirection _snSortDirection = SortDirection.None;
    private bool _isSortedAscending;

    private List<ServiceRequest> PagedServiceRequests => ServiceRequests
        .Where(ServiceRequestFilter)
        .Skip((currentPage - 1) * _rowsPerPage)
        .Take(_rowsPerPage)
        .ToList();

    private void OnRowsPerPageChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var rowsPerPage))
        {
            _rowsPerPage = rowsPerPage;
            currentPage = 1;
            // TotalPages = (int)Math.Ceiling((double)ServiceRequests.Count / _rowsPerPage);
        }
    }

    private void SortBySN()
    {
        if (_snSortDirection == SortDirection.None || _snSortDirection == SortDirection.Descending)
        {
            _isSortedAscending = true;
            _snSortDirection = SortDirection.Ascending;
            ServiceRequests = ServiceRequests.OrderBy(sr => sr.SN).ToList();
        }
        else
        {
            _isSortedAscending = false;
            _snSortDirection = SortDirection.Descending;
            ServiceRequests = ServiceRequests.OrderByDescending(sr => sr.SN).ToList();
        }
    }

    private string GetStatusClass(string status)
    {
        return status switch
        {
            "Pending" => "status-pending",
            "NotViewed" => "status-pending",
            "Viewed" => "status-ongoing",
            "Assigned" => "status-completed",
            "Cancelled" => "status-cancelled",
            "Completed" => "status-completed",
            "Inprogress" => "status-ongoing",
            "Requested" => "status-pending",
            "Created" => "status-pending",
            _ => ""
        };
    }

    // private Func<ServiceRequest, bool> ServiceRequestFilter => x =>
    // {
    //     if (string.IsNullOrWhiteSpace(_searchTerm))
    //         return true;
    //     return x.Title.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase);
    // };

    private void AddServiceRequest()
    {
    }

    public class ServiceRequest
    {
        public int SN { get; set; }
        public int Id { get; set; }
        public string Title { get; set; }
        public string Category { get; set; }
        public DateTime DateTime { get; set; }
        public string Status { get; set; }
    }

    private int currentPage = 1;
    private int TotalPages => (int)Math.Ceiling((double)ServiceRequests.Count / _rowsPerPage);

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
        }
    }

    private void NextPage()
    {
        if (currentPage < TotalPages)
        {
            currentPage++;
        }
    }

    private void GoToPage(int pageNumber)
    {
        if (pageNumber > 0 && pageNumber <= TotalPages)
        {
            currentPage = pageNumber;
        }
    }

    private string GetActiveClass(int pageNumber)
    {
        return pageNumber == currentPage ? "active-page" : "";
    }

    private Task OpenDuplicateDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters
    {
        { "Message", "Are You Sure You Want To Duplicate This Service Request" },
        { "ConfirmButtonColor", "#1DC141" },
        { "CancelButtonColor", "#808080" }
    };

        return DialogService.ShowAsync<CancelPopup>("Duplicate Action", parameters, options);
    }

    private Task OpenCancelDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters
    {
        { "Message", "Are You Sure You Want To Cancel This Service Request" },
        { "ConfirmButtonColor", "#FF2C2C" },
        { "CancelButtonColor", "#5A5A5A" }
    };

        return DialogService.ShowAsync<CancelPopup>("Cancel Action", parameters, options);
    }

    private async Task OpenTaskDialogAsync(int task_Id)
    {
        // var options = new DialogOptions { CloseOnEscapeKey = true };

        // return DialogService.ShowAsync<AssignTaskPopup>("", options);

        var options = new DialogOptions { CloseOnEscapeKey = true };

        var dialog = DialogService.Show<AssignTaskPopup>("Assign Task", new DialogParameters
    {
        { "TaskId", task_Id } 
    });

        var result = await  dialog.Result;
    }

    //search filter
    private Func<ServiceRequest, bool> ServiceRequestFilter => x =>
      {
          if (string.IsNullOrWhiteSpace(_searchTerm))
              return true;
          return x.Title.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)
             || x.Category.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)
             || x.Status.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase);
      };
    private async void OnStatusPageChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var status))
        {
            ServiceRequests = await GetServiceRequests(status);
            StateHasChanged();
        }
    }
}


@page "/all-notifications"
@inject IDialogService DialogService
<MudContainer MaxWidth="MaxWidth.Large">
    <MudGrid>
        <MudItem xs="12" Class="mt-5">
            <MudContainer Class="custom-container mb-5 p-5" Style="background-color:#fff; border:0.1px solid #cbcbcb; border-radius:10px;">
                <MudContainer Class="mt-5">
                    <MudGrid AlignItems="Center" Style="justify-content:space-between; width: calc(100% + 24px)!important;">
                        <MudItem lg="3" md="12" xs="12" Class="mb-3">
                            <MudText Typo="Typo.h6" Class="pl-2 d-flex align-items-center">All Notifications</MudText>
                        </MudItem>
                        <MudItem lg="3" md="12" xs="12" Class="mb-3">
                            <div class="custom-select-wrapper">
                                <select class="custom-select" @onchange="OnRowsPerPageChanged">
                                    <option value="6">View Rows: 6</option>
                                    <option value="100">View Rows: 100</option>
                                    <option value="200">View Rows: 200</option>
                                    <option value="300">View Rows: 300</option>
                                    <option value="400">View Rows: 400</option>
                                </select>
                            </div>
                        </MudItem>
                        <MudItem lg="3" md="12" xs="12" Class="mb-3">
                            <div class="search-container">
                                <input type="text" placeholder="Search Notification" class="search-input" @bind-value="_searchTerm" @bind-value:event="oninput" />
                                <img src="./Images/Search.svg" alt="Search Icon" class="mud-icon" />
                            </div>
                        </MudItem>
                        <MudItem lg="3" xs="12" Class="d-flex  mb-3">
                            <MudButton Variant="Variant.Filled" Class="add-btn" OnClick="OpenNotificationAsync">
                                <img src="./Images/bank-btn.svg" alt="Add Icon" class="mud-icon" />
                                Send Notification
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                </MudContainer>

                <MudContainer Class="custom-container">
                    <MudTable Items="PaginatedMessages" Striped="false" Bordered="false" Class="custom-table mb-5 mt-5">
                        <HeaderContent>
                            <MudTh Class="t-head" Style="width: 20%;">Title</MudTh>
                            <MudTh Class="t-head" Style="width: 30%;">Description</MudTh>
                            <MudTh Class="t-head" Style="width: 15%;">For</MudTh>
                            <MudTh Class="t-head" Style="width: 15%;">Send By</MudTh>
                            <MudTh Class="t-head" Style="width: 10%;">Date Time</MudTh>
                            <MudTh Class="t-head" Style="width: 10%;">Action</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd ColSpan="6">
                                <MudPaper Class="row-card" Elevation="0" Style="border: 1px solid #ccc; border-radius: 8px; padding: 10px;">
                                    <MudGrid Class="grid-rows">
                                        <MudItem xs="2" Class="text-center grid-item" Style="width: 20%;">
                                            @context.Title
                                        </MudItem>
                                        <MudItem xs="3" Class="text-center grid-item wrap-text" Style="width: 30%;">
                                            @ShortenText(@context.Description, 8)
                                        </MudItem>
                                        <MudItem xs="2" Class="text-center grid-item" Style="width: 15%;">
                                            @context.For
                                        </MudItem>
                                        <MudItem xs="2" Class="text-center grid-item" Style="width: 15%;">
                                            @context.SendBy
                                        </MudItem>
                                        <MudItem xs="1" Class="text-center grid-item" Style="width: 10%;white-space: nowrap;">
                                            @context.DateTime
                                        </MudItem>
                                        <MudItem xs="1" Class="text-center grid-item" Style="width: 10%;">
                                            <MudIconButton OnClick="OpenNotificationDetailsAsync">
                                                <img src="./Images/EditAction.svg" alt="Action Icon" style="width: 41px; height: 30px;" />
                                            </MudIconButton>
                                        </MudItem>
                                    </MudGrid>
                                </MudPaper>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudContainer>

                <PagerContent>
                    <MudGrid AlignItems="Center" Justify="Justify.Center">
                        <MudItem>
                            <div class="custom-pagination py-3">
                                <button @onclick="PreviousPage">
                                    <img src="./Images/Chevron_Left_MD.svg" alt="Previous" class="pagination-icon" />
                                </button>
                                @for (int i = 1; i <= TotalPages; i++)
                                {
                                    <button @onclick="() => GoToPage(i)" class="pagination-button @GetActiveClass(i)">
                                        @i
                                    </button>
                                }
                                <button @onclick="NextPage">
                                    <img src="./Images/Chevron_Right_MD.svg" alt="Next" class="pagination-icon" />
                                </button>
                            </div>
                        </MudItem>
                    </MudGrid>
                </PagerContent>
            </MudContainer>
        </MudItem>
    </MudGrid>
</MudContainer>

<style>
    .add-btn {
        display: flex;
        padding: 10px;
        justify-content: space-evenly;
        align-items: center;
        gap: 8px;
        flex-shrink: 0;
        border-radius: 8px;
        color: #FFF;
        font-family: Inter;
        font-size: 16px;
        line-height: normal;
        font-weight: 700;
        background: #0074E3;
        text-transform: capitalize;
        width: 100% !important;
    }

    .add-btn:hover {
        display: flex;
        padding: 10px;
        justify-content: space-evenly;
        align-items: center;
        gap: 8px;
        flex-shrink: 0;
        border-radius: 8px;
        color: #FFF;
        font-family: Inter;
        font-size: 16px;
        font-weight: 700;
        line-height: normal;
        background: #0074E3;
        text-transform: capitalize;
        width: 100% !important;
    }

    .mud-icon {
        width: 24px;
        height: 24px;
    }

    .search-container {
        display: flex;
        padding: 10px 18px;
        justify-content: center;
        align-items: center;
        border-radius: 8px;
        font-size: 14px;
        border: 0.5px solid #000;
        background: #EFEFEF;
        width: 100%;
    }

    .search-input {
        border: none;
        outline: none;
        flex-grow: 1;
        background: transparent;
        font-size: 14px;
    }

    .search-icon {
        font-size: 20px;
        color: #000;
    }

    .custom-select {
        flex-shrink: 0;
        padding: 12px 18px;
        border-radius: 10px;
        border: 0.2px solid #000;
        background: #EFEFEF;
        font-size: 14px;
        width: 100%;
    }

    /*tabel*/
    .mud-table-root .mud-table-head {
        background-color: #Efefef;
    }

    .t-head {
        text-align: center;
        font-size: 18px;
        font-style: normal;
        font-weight: 800;
        line-height: normal;
        color: #000 !important;
    }

    .text-center {
        text-align: center;
        font-family: Inter;
        font-size: 16px;
        font-style: normal;
        font-weight: 500;
        line-height: normal;
        color: #000;
    }

    .active-page {
        background-color: #0074e3 !important;
        color: #fff !important;
        border: none !important;
    }

    .row-card {
        border: 0.5px solid #767676;
        border-radius: 10px;
        padding: 15px;
        background-color: white;
        overflow: hidden;
    }

    .action-container {
        display: flex;
        justify-content: space-around;
        background: #f1f1f1;
        border-radius: 5px;
        padding: 5px;
    }

    .mud-toolbar.mud-toolbar-gutters.mud-table-toolbar {
        height: auto;
        padding: 15px;
    }

    .mud-table-root .mud-table-body .mud-table-cell {
        border-bottom: none;
    }

    .mud-table-root .mud-table-cell {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .mud-grid-spacing-xs-6 > .grid-item {
        padding-left: 24px;
        padding-top: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .grid-rows {
        justify-content: space-between !important;
    }

    .custom-container {
        max-height: 100%;
    }

    .grid-rows > .mud-grid-item {
        flex: 1;
        text-overflow: ellipsis;
        white-space: pre-wrap;
    }

        .grid-rows > .mud-grid-item:last-child {
            flex: 1 1 100px;
        }

        .grid-rows > .mud-grid-item:nth-last-child(2) {
            flex: 1 1 100px;
        }

    /*pagination*/
    .custom-pagination {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
    }

    .pagination-button {
        width: 24px;
        height: 24px;
        border: 2px solid #000;
        background-color: transparent;
        color: #000;
        border-radius: 50%;
        font-weight: bold;
        font-size: 16px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
    }
</style>
@code {
    private string _searchTerm;
    private int _rowsPerPage = 1;
    private int currentPage = 1;

    public class Message
    {
        public string Title { get; set; }
        public string Description { get; set; }
        public string For { get; set; }
        public string SendBy { get; set; }
        public string DateTime { get; set; }
    }

    private List<Message> messages = new List<Message>
    {
        new Message { Title = "Welcome", Description = "Welcome to the platform.", For = "New Users", SendBy = "Admin", DateTime = "July 12 2024" },
        new Message { Title = "Reminder", Description = "Need House Painter To Paint Full Hours Including Farm", For = "All Users", SendBy = "Support", DateTime ="July 12 2024" }
    };

    // Filtered messages based on search term
    private IEnumerable<Message> FilteredMessages => messages
        .Where(ServiceRequestFilter);

    private IEnumerable<Message> PaginatedMessages => FilteredMessages
        .Skip((currentPage - 1) * _rowsPerPage)
        .Take(_rowsPerPage);

    private Func<Message, bool> ServiceRequestFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchTerm))
            return true;
        return x.Title.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)
             || x.Description.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase);
    };

    private string GetActiveClass(int pageNumber) =>
        pageNumber == currentPage ? "active-page" : "";

    private void GoToPage(int pageNumber)
    {
        if (pageNumber > 0 && pageNumber <= TotalPages)
        {
            currentPage = pageNumber;
            StateHasChanged();
        }
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            StateHasChanged();
        }
    }

    private void NextPage()
    {
        if (currentPage < TotalPages)
        {
            currentPage++;
            StateHasChanged();
        }
    }

    private void OnRowsPerPageChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var rowsPerPage))
        {
            _rowsPerPage = rowsPerPage;
            currentPage = 1;
            StateHasChanged();
        }
    }

    private void SearchNotifications(ChangeEventArgs e)
    {
        _searchTerm = e.Value?.ToString();
        currentPage = 1;
        StateHasChanged();
    }

    public string ShortenText(string text, int wordLimit)
    {
        var words = text?.Split(' ');
        if (words != null && words.Length > wordLimit)
        {
            return string.Join(" ", words.Take(wordLimit)) + "...";
        }
        return text;
    }

    public int TotalPages => (int)Math.Ceiling((double)FilteredMessages.Count() / _rowsPerPage);
    //open popup
    private Task OpenNotificationAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };

        return DialogService.ShowAsync<NewNotifications>("", options);
    }
    private Task OpenNotificationDetailsAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };

        return DialogService.ShowAsync<NotificationDetails>("", options);
    }
}
